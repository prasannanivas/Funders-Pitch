{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Campaign from \"../../ethereum/campaign\";\nimport { Link } from \"../../routes\";\nimport { Button, Table } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport RequestRow from \"../../components/Requestrow\";\n\nclass RequestIndex extends Component {\n  static async getInitialProps(props) {\n    console.log(\"this is \" + props.query.address);\n    const campaign = Campaign(props.query.address);\n    const requestcount = await campaign.methods.gatRequestsCount().call();\n    const requests = await Promise.all(Array(parseInt(requestcount)).fill().map((element, index) => {\n      return campaign.methods.requests(index).call();\n    }));\n    return {\n      address: props.query.address,\n      requests,\n      requestcount\n    };\n  }\n\n  renderRow() {\n    return this.props.requests.map((request, i) => {\n      return __jsx(RequestRow, {\n        key: i,\n        id: i + 1,\n        address: this.props.address,\n        request: request\n      });\n    });\n  }\n\n  render() {\n    const {\n      Header,\n      Row,\n      HeaderCell,\n      Body\n    } = Table;\n    return __jsx(Layout, null, __jsx(\"div\", {\n      className: \"text-center\"\n    }, __jsx(Link, {\n      route: `/campaigns/show/${this.props.address}/request/new`\n    }, __jsx(Button, {\n      size: \"massive\",\n      color: \"facebook\"\n    }, \"New request +\")), __jsx(Table, null, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"ID\"), __jsx(HeaderCell, null, \"Description\"), __jsx(HeaderCell, null, \"Amount\"), __jsx(HeaderCell, null, \"Recipient\"), __jsx(HeaderCell, null, \"Approval Count\"), __jsx(HeaderCell, null, \"Approve\"), __jsx(HeaderCell, null, \"Finalize\"))), this.renderRow())));\n  }\n\n}\n\nexport default RequestIndex;","map":{"version":3,"sources":["/Users/prasannanivas/Desktop/Funding/pages/Campaigns/request.js"],"names":["React","Component","Campaign","Link","Button","Table","Layout","RequestRow","RequestIndex","getInitialProps","props","console","log","query","address","campaign","requestcount","methods","gatRequestsCount","call","requests","Promise","all","Array","parseInt","fill","map","element","index","renderRow","request","i","render","Header","Row","HeaderCell","Body"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,mBAA9B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;;AAEA,MAAMC,YAAN,SAA2BP,SAA3B,CAAqC;AACnC,eAAaQ,eAAb,CAA6BC,KAA7B,EAAoC;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAaF,KAAK,CAACG,KAAN,CAAYC,OAArC;AACA,UAAMC,QAAQ,GAAGb,QAAQ,CAACQ,KAAK,CAACG,KAAN,CAAYC,OAAb,CAAzB;AACA,UAAME,YAAY,GAAG,MAAMD,QAAQ,CAACE,OAAT,CAAiBC,gBAAjB,GAAoCC,IAApC,EAA3B;AACA,UAAMC,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAR,CACrBC,KAAK,CAACC,QAAQ,CAACR,YAAD,CAAT,CAAL,CACGS,IADH,GAEGC,GAFH,CAEO,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACvB,aAAOb,QAAQ,CAACE,OAAT,CAAiBG,QAAjB,CAA0BQ,KAA1B,EAAiCT,IAAjC,EAAP;AACD,KAJH,CADqB,CAAvB;AAOA,WAAO;AAAEL,MAAAA,OAAO,EAAEJ,KAAK,CAACG,KAAN,CAAYC,OAAvB;AAAgCM,MAAAA,QAAhC;AAA0CJ,MAAAA;AAA1C,KAAP;AACD;;AAEDa,EAAAA,SAAS,GAAE;AACP,WAAO,KAAKnB,KAAL,CAAWU,QAAX,CAAoBM,GAApB,CAAwB,CAACI,OAAD,EAAUC,CAAV,KAAc;AACzC,aAAO,MAAC,UAAD;AAAY,QAAA,GAAG,EAAIA,CAAnB;AAAsB,QAAA,EAAE,EAAEA,CAAC,GAAC,CAA5B;AAA+B,QAAA,OAAO,EAAI,KAAKrB,KAAL,CAAWI,OAArD;AAA8D,QAAA,OAAO,EAAIgB;AAAzE,QAAP;AACH,KAFM,CAAP;AAGH;;AACDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,GAAV;AAAeC,MAAAA,UAAf;AAA2BC,MAAAA;AAA3B,QAAoC/B,KAA1C;AACA,WACE,MAAC,MAAD,QACE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAG,mBAAkB,KAAKK,KAAL,CAAWI,OAAQ;AAAnD,OACE,MAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAuB,MAAA,KAAK,EAAC;AAA7B,uBADF,CADF,EAOE,MAAC,KAAD,QACE,MAAC,MAAD,QACE,MAAC,GAAD,QACE,MAAC,UAAD,aADF,EAEE,MAAC,UAAD,sBAFF,EAGE,MAAC,UAAD,iBAHF,EAIE,MAAC,UAAD,oBAJF,EAKE,MAAC,UAAD,yBALF,EAME,MAAC,UAAD,kBANF,EAOE,MAAC,UAAD,mBAPF,CADF,CADF,EAYO,KAAKe,SAAL,EAZP,CAPF,CADF,CADF;AA0BD;;AAhDkC;;AAkDrC,eAAerB,YAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Campaign from \"../../ethereum/campaign\";\nimport { Link } from \"../../routes\";\nimport { Button, Table } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport RequestRow from \"../../components/Requestrow\";\n\nclass RequestIndex extends Component {\n  static async getInitialProps(props) {\n    console.log(\"this is \" + props.query.address);\n    const campaign = Campaign(props.query.address);\n    const requestcount = await campaign.methods.gatRequestsCount().call();\n    const requests = await Promise.all(\n      Array(parseInt(requestcount))\n        .fill()\n        .map((element, index) => {\n          return campaign.methods.requests(index).call();\n        })\n    );\n    return { address: props.query.address, requests, requestcount };\n  }\n\n  renderRow(){\n      return this.props.requests.map((request, i)=>{\n          return <RequestRow key = {i} id={i+1} address = {this.props.address} request = {request}/>\n      })\n  }\n  render() {\n    const { Header, Row, HeaderCell, Body } = Table;\n    return (\n      <Layout>\n        <div className=\"text-center\">\n          <Link route={`/campaigns/show/${this.props.address}/request/new`}>\n            <Button size=\"massive\" color=\"facebook\">\n              New request +\n            </Button>\n          </Link>\n\n          <Table>\n            <Header>\n              <Row>\n                <HeaderCell>ID</HeaderCell>\n                <HeaderCell>Description</HeaderCell>\n                <HeaderCell>Amount</HeaderCell>\n                <HeaderCell>Recipient</HeaderCell>\n                <HeaderCell>Approval Count</HeaderCell>\n                <HeaderCell>Approve</HeaderCell>\n                <HeaderCell>Finalize</HeaderCell>\n              </Row>\n            </Header>\n                {this.renderRow()}\n          </Table>\n        </div>\n      </Layout>\n    );\n  }\n}\nexport default RequestIndex;\n"]},"metadata":{},"sourceType":"module"}